# Evan Anthopoulos
# Pulsar Program

import pandas as pd

# This program takes data from the Swinburne supercomputer's pulsar catalogue
# and makes a description for each pulsar in a readable format.

# Important Note: All laws except for survey.law.csv are hardcoded to have 8 columns
# that must be entered in the correct order.
class Gate:
    def init_gate(self, filename, counter: int):
        lower_bound = float(filename.iloc[counter,0])
        upper_bound = float(filename.iloc[counter,1])
        g_type = str(filename.iloc[counter,2])
        g_format = int(filename.iloc[counter,3])
        g_syntax = str(filename.iloc[counter,4])
        g_prefix = str(filename.iloc[counter,5])
        g_time = str(filename.iloc[counter,6])
        g_factor = float(filename.iloc[counter, 7])
        ngate = [lower_bound,upper_bound,g_type,g_format,g_syntax,g_prefix,g_time,g_factor]
        return ngate

    # This class creates a gate specifically for survey, as the survey.law.csv is unique
    def init_survey_gate(self, filename, counter: int):
        s_survey_str = str(filename.iloc[counter,0])
        s_survey_name = str(filename.iloc[counter,1])
        sgate = [s_survey_str,s_survey_name]
        return sgate
    
    
    class Law:
        # Contains n amount of gates, converts each gate to law, then
        # outputs a string according to the law.
        
        # This function iterates through the given law.csv and creates a list
        # that has n amount of lists inside of it, depending on how many rows are in the law.csv file.
        def load(self, law_name, law_type):
            g = Gate()
            row_count, column_count = law_name.shape
            n_gate = []
            s_gate = []
            if 'survey.law.csv' == str(law_type):
                for i in range(row_count):
                    gate = g.init_survey_gate(law_name, i)
                    s_gate.append(gate)
                return s_gate
            else:
                for j in range(row_count):
                    gate = g.init_gate(law_name, j)
                    n_gate.append(gate)
                return n_gate
        
        
        # This function is specifically for the surveys. It reads in the surveys from df that and 
        # are initialized in init_survey_gate and converts them into lists that are then 
        # converted to strings from survey.law.csv.
        def survey_law(self, survey_load, survey_num: str):
            row_count, column_count = survey_load.shape
            s_law = l.load(survey_load, survey_file)
            survey = str(survey_num).strip()
            final_str = 'None'
            for k in range(row_count):
                if '*' not in survey:
                    if ',' in survey:
                        first_comma = survey.index(',')
                        first_survey = str(survey[:first_comma].strip())
                        for law in s_law:
                            survey_str1 = str(law[0]).strip()
                            survey_name1 = str(law[1])
                            if survey_str1 == first_survey:
                                final_str = str(survey_name1)
                    else:
                        for law in s_law:
                            survey_str2 = str(law[0]).strip()
                            survey_name2 = str(law[1])
                            if survey_str2 == survey:
                                final_str = str(survey_name2)
                         
                else:
                    pass
            return final_str
        
        
        # This function takes the list of lists from l.load() and converts it to a string
        def laws_to_str(self, filename, filetype: str, counter: int) -> str:
            n_law = l.load(filename, filetype)
            if 'dm.law.csv' == str(filetype):
                value = dm_list[counter]
            elif 'period.law.csv' == str(filetype):
                value = period_list[counter]
            elif 'pb.law.csv' == str(filetype):
                value = pb_list[counter]
            elif 'ecc.law.csv' == str(filetype):
                value = ecc_list[counter]
            elif 'minmass.law.csv' == str(filetype):
                value = minmass_list[counter]
            elif 'age.law.csv' == str(filetype):
                value = age_list[counter]
            elif 'bsurf.law.csv' == str(filetype):
                value = bsurf_list[counter]
            elif 's1400.law.csv' == filetype:
                value = s1400_list[counter]
            if '*' not in str(value):
                if 'period.law.csv' == str(filetype):
                     value = float(value)
                     value *= 1000
                # The following values are obtained by iterating through
                # the list of lists generated by the load and init_gate functions.
                for law_list in n_law:
                    lower_bound = float(law_list[0])
                    upper_bound = float(law_list[1])
                    l_type = str(law_list[2].strip())
                    l_format = int(law_list[3])
                    l_syntax = str(law_list[4].strip())
                    l_prefix = str(law_list[5].strip())
                    l_time = str(law_list[6].strip())
                    l_factor = float(law_list[7])
                    ecc_value = str(value)
                    value = str(value)
                    value = value.replace('D', 'E')
                    # if 'ecc.law.csv' != filetype:
                    #     value = float(value)
                    if lower_bound <= float(value) <= upper_bound:
                        if 'period.law.csv' == filetype:
                            value = float(value)
                            value *= l_factor
                        if 'pb.law.csv' == filetype:
                            value = float(value)
                            value *= l_factor
                        if ('ecc.law.csv') != filetype or ('minmass.law.csv' != filetype) or ('age.law.csv' != filetype):
                            value = round(float(value), l_format)
                        if 'minmass.law.csv' == filetype:
                            if 'e' not in str(value):
                                value = float(value)
                                value = round(float(value), l_format)
                            else:
                                value = str(value)
                        if 'age.law.csv' == filetype:
                            value = float(value)
                            value *= l_factor
                            value = round(value, l_format)
                            if value >= 1:
                                value = int(value)
                            value = str(value)
                        if 'ecc.law.csv' == filetype:
                            # if 'e' not in ecc_value:
                            #     ecc_value = float(ecc_value)
                            #     ecc_value = "{:.2e}".format(ecc_value)
                            if float(ecc_value) > 0:
                                value = ecc_value
                            else:
                                value = 'None'
                        if 'bsurf.law.csv' == filetype:
                            value = float(value)
                            value = "{:.2e}".format(value)
                            value = str(value)
                        if l_time == '':
                            return l_prefix + ' ' + l_type + ' ' + l_syntax + ' ' +  str(value).strip()
                        else:
                            return l_prefix + ' ' + l_type + ' ' + l_syntax + ' ' +  str(value).strip() + ' ' + l_time
            else:
                pass
                

# create_csv = open('s1400.law.csv', 'w+')
# Load in main csv file
df = pd.read_csv('filtered.csv',  header=None, sep='~', engine='python')

# Load in period law csv
period_file = 'period.law.csv'
period_law_csv = pd.read_csv(period_file, header=None, sep=',', engine='python')

# Load in dm law csv
dm_file = 'dm.law.csv'
dm_law_csv = pd.read_csv(dm_file, header=None, sep=',', engine='python')

# Load in age law csv
age_file = 'age.law.csv'
age_law_csv = pd.read_csv(age_file, header=None, sep=',', engine='python')

# Load in bsurf law csv
bsurf_file = 'bsurf.law.csv'
bsurf_law_csv = pd.read_csv(bsurf_file, header=None, sep=',', engine='python')

# Load in minmass law csv
minmass_file = 'minmass.law.csv'
minmass_law_csv = pd.read_csv(minmass_file, header=None, sep=',', engine='python')

# Load in pb law csv
pb_file = 'pb.law.csv'
pb_law_csv = pd.read_csv(pb_file, header=None, sep=',', engine='python')

# Load in ecc law csv
ecc_file = 'ecc.law.csv'
ecc_law_csv = pd.read_csv(ecc_file, header=None, sep=',', engine='python')

#Load in s1400 law csv
s1400_file = 's1400.law.csv'
s1400_law_csv = pd.read_csv(s1400_file, header=None, sep=',', engine='python')

# Load in survey law csv
survey_file = 'survey.law.csv'
survey_law_csv = pd.read_csv(survey_file, header=None, sep=',', engine='python')

# Define which data column within df corresponds to data type
psr_col = 0
period_col = 4
dm_col = 7
pb_col = 13
ecc_col = 16
minmass_col = 19
age_col = 24
bsurf_col = 23
year_col = 12
survey_col = 10
s1400_col = 25

# Create lists of data depending on column location within df
psr_list = df.iloc[:,psr_col]
period_list = df.iloc[:,period_col]
dm_list = df.iloc[:,dm_col]
pb_list = df.iloc[:,pb_col]
ecc_list = df.iloc[:,ecc_col]
minmass_list = df.iloc[:,minmass_col]
age_list = df.iloc[:,age_col]
bsurf_list = df.iloc[:,bsurf_col]
year_list = df.iloc[:,year_col]
survey_list = df.iloc[:,survey_col]
s1400_list = df.iloc[:,s1400_col]

# Initialize classes
g = Gate()
l = g.Law()

# Main Function Loop -- Calls the functions and outputs the paragraph to a .txt file.
# If statements check whether functions return actual data. If not, the string becomes
# empty, thus only printing if there is actual data to print.
file1 = open('databasev1.txt', 'w+')
for i in range(len(psr_list)):
    # PERIOD
    if 'None' not in str(l.laws_to_str(period_law_csv, period_file, i)):
        period_str = 'PSR ' + psr_list[i] + 'is ' + str(l.laws_to_str(period_law_csv, period_file, i))
    # DISPERSION MEASURE
    if 'None' not in str(l.laws_to_str(dm_law_csv, dm_file, i)):
        dm_str = ' and has ' + str(l.laws_to_str(dm_law_csv, dm_file, i)) + '.'
    # AGE
    if 'None' not in str(l.laws_to_str(age_law_csv, age_file, i)):
        age_str = ' It is ' + str(l.laws_to_str(age_law_csv, age_file, i) + '.')
    else:
        age_str = ''
    # BSURF
    if 'None' not in str(l.laws_to_str(bsurf_law_csv, bsurf_file, i)):
        bsurf_str = ' It has ' + str(l.laws_to_str(bsurf_law_csv, bsurf_file, i)) + '.'
    else:
        bsurf_str = ''
    # YEAR
    if '*' not in str(year_list[i]):
        if '1089806188' in str(year_list[i]):
            year_str = ''
        else:
            year_str = ' It was discovered in ' + str(year_list[i]) + ' as part of'
    else:
        year_str = ''
    # SURVEY
    if 'None' not in str(l.survey_law(survey_law_csv, str(survey_list[i]))):
        if year_str == '':
            survey_str = ''
        else:
            survey_str = str(l.survey_law(survey_law_csv, str(survey_list[i]))) + '.'
    else:
        survey_str = ''
    # ORBITAL PERIOD
    if 'None' not in str(l.laws_to_str(pb_law_csv, pb_file, i)):
        pb_str = ' PSR ' + psr_list[i] + 'has ' + str(l.laws_to_str(pb_law_csv, pb_file, i))
    else:
        pb_str = ''
    # ECCENTRICITY
    if 'None' not in str(l.laws_to_str(ecc_law_csv, ecc_file, i)):
        if pb_str == '':
            ecc_str = ' It has ' + str(l.laws_to_str(ecc_law_csv, ecc_file, i)) + '.'
        else:
            ecc_str = ' and ' + str(l.laws_to_str(ecc_law_csv, ecc_file, i)) + '.'
    else:
        ecc_str = '.'
    # MINMASS
    if 'None' not in str(l.laws_to_str(minmass_law_csv, minmass_file, i)):
        minmass_str = ' This pulsar has ' + str(l.laws_to_str(minmass_law_csv, minmass_file, i) + '.')
    else:
        minmass_str = ' This pulsar appears to be solitary.'
    # S1400
    if 'None' not in str(l.laws_to_str(s1400_law_csv, s1400_file, i)):
        s1400_str = ' and has an s1400 of ' + str(l.laws_to_str(s1400_law_csv, s1400_file, i))
    else:
        s1400_str = ''
    print(period_str + dm_str + age_str + bsurf_str + year_str + survey_str + pb_str + ecc_str + minmass_str, file = file1)
file1.close()















